name: Flutter Build & Test

on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
    steps:

      # Check out current repository
      - name: Fetch sources
        uses: actions/checkout@v2.3.4

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PUBSPEC_FILE="${GITHUB_WORKSPACE}/pubspec.yaml"
          VERSION="$(yq e '.version' $PUBSPEC_FILE)"
          echo "Current version is $VERSION"

          echo "::set-output name=version::$VERSION"

      # Install Flutter
      - name: Install Flutter
        uses: subosito/flutter-action@v1.5.3

      # Get Flutter packages
      - name: Get packages
        run: flutter pub get

      # Run Flutter tests
      - name: Test app
        run: flutter test --coverage

      # Send test report to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage/lcov.info

  prePublish:
    name: Pre-publish
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch sources
        uses: actions/checkout@v2.3.4

      # Run package publish dry-run
      - name: Dry-run package publish
        uses: sakebook/actions-flutter-pub-publisher@v1.3.1
        with:
          credential: ${{ secrets.CREDENTIALS_JSON }}
          skip_test: true
          dry_run: true


  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: [build, prePublish]
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.3.4

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
